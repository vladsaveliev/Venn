#!/usr/bin/env python
from __future__ import print_function

import json
import sys
from optparse import OptionParser
from os.path import dirname, basename, join, splitext, isfile

from ngs_utils.bed_utils import verify_bed
from ngs_utils.file_utils import adjust_path, safe_mkdir, verify_file, splitext_plus
from ngs_utils.logger import critical

from venn_bed import venn
from venn_bed.venn import get_upset_file


def main():
    parser = OptionParser(usage='Usage: ' + basename(__file__) + ' label1=bed_or_vcf1 label2=bed_or_vcf2 ... -o results_dir')
    parser.add_option('-o', '--output-dir', dest='output_dir')
    parser.add_option('-r', '--regions', dest='regions')
    (opts, args) = parser.parse_args(sys.argv[1:])

    values = [value.split('=') for value in args]
    input_fpaths = [verify_file(v[1] if len(v) == 2 else v[0]) for v in values]
    names_map =    {verify_file(v[1] if len(v) == 2 else v[0]): splitext_plus(v[0])[0] for v in values}

    ''' Example VCFs:
    input_fpaths = tuple([join(vcfs_dirpath, vcf_name) for vcf_name in [
        'syn3-vardict.vcf.gz',
        'syn3-ensemble.vcf.gz',
        'syn3-tumor-single-vardict.vcf.gz',
        'syn3-truth.vcf.gz',
    ]])
    names_map = {
        'syn3-vardict.vcf.gz': 'vardict-paired',
        'syn3-ensemble.vcf.gz': 'ensemble-paired',
        'syn3-tumor-single-vardict.vcf.gz': 'vardict-single',
        'syn3-truth.vcf.gz': 'truth-paired'}
    '''

    '''Example BED files:    
    bed_fpaths = tuple([join(beds_dirpath, bed) for bed in [
        'AZ.bed',
        'CRE.bed',
        'IDT.bed',
        'Med.bed',
        # 'One.bed',
        # 'One.hg38tohg19.bed',
        'V6.bed',
    ]])
    names_map = {
        'AZ': 'AZ Exome',
        'CRE': 'B',
        'V6': 'A',
        'IDT': 'D',
        'Med': 'C'}
    '''

    if not opts.__dict__.get('output_dir'):
        critical('Please, provide output dir with -o')
    output_dir = adjust_path(opts.output_dir)
    safe_mkdir(output_dir)
    work_dir = safe_mkdir(join(output_dir, 'intersections'))
    regions_file = verify_bed(opts.regions) if opts.regions else None

    # Make upset
    upset_csv = get_upset_file(work_dir, output_dir, input_fpaths, names_map, regions_file)
    upset_json = upset_csv.replace('.csv', '.json')
    with open(upset_json, 'w') as out:
        json.dump(dict(
            file='http://localhost:8000/data/variants/' + basename(upset_csv),
            name='intersect vcfs',
            header=0,
            skip=0,
            separator=';',
            meta=[
                {"type": "id", "index": 0, "name": "Variant"}
            ],
            sets=[
                {"format": "binary", "start": 2, 'end': len(input_fpaths) + 1}
            ],
    ), out, indent=4, separators=(',', ': '))

    print(upset_json)

    # Make Venn
    intersection_size_by_subset = venn.find_pairwise_intersections(work_dir, input_fpaths, regions_file=regions_file)
    json_txt = venn.save_venn_diagram_data(intersection_size_by_subset, names_map)
    html_file = venn.write_html(output_dir, json_txt, input_fpaths)

    print('-----------------------')
    print('')
    print('HTML: ' + html_file)


if __name__ == '__main__':
    main()


